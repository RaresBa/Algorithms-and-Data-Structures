import time

#(1) Naive Recursive:
def fibonacci_recursive(n):
    if n<=1:
        return n
    return fibonacci_recursive(n-1)+fibonacci_recursive(n-2)

#(2) Bottom Up:
def fibonacci_bottom_up(n):
    fib=[0,1]
    for i in range(2, n+1):
        fib.append(fib[i-1]+fib[i-2])
    return fib[n]

#(3) Closed Form:
def fibonacci_closed_form(n):
    phi=(1+5**0.5)/2
    return round((phi**n)/5**0.5)

#(4) Using Matrix Representation:
def fibonacci_matrix(n):
    def multiply(A, B):
        return [[A[0][0]*B[0][0] + A[0][1]*B[1][0], A[0][0]*B[0][1] + A[0][1]*B[1][1]],
                [A[1][0]*B[0][0] + A[1][1]*B[1][0], A[1][0]*B[0][1] + A[1][1]*B[1][1]]]

    def power(M, p):
        if p == 1:
            return M
        if p % 2 == 0:
            half = power(M, p // 2)
            return multiply(half, half)
        else:
            return multiply(M, power(M, p - 1))

    F = [[1, 1], [1, 0]]
    return power(F, n)[0][1]


